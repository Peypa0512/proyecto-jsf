Creando proyecto y subiendolo a Github
--------------------------------------

Para iniciar el proyecto......	

	File --> new --> maven project
	
En use default Workspace location puedes elegir donde guardar el proyecto

Next

en Filter eligiremos el arquitipo...

	maven-archetype-webapp
	
	elegimos
	
	org.apache.mave.archetypes
	
Next

	Group id --> el dominio de la empresa, autor, etc...
	Artifact id --> nombre del proyecto (project-jsf)
	versón  --> dejaremos la que hay
	package --> lo borraremos, luego si nos hace falta ya lo crearemos...

Finish

Esperamos que se cargue, una vez hecho nos iremos a la carpeta del proyecto boton dcho y en resources
en location le damos al icono y nos llevará a la carpeta.

una vez centro del proyecto abrimos la terminal git bush para iniciar el gib(dentro de la carpeta que se quiera subir)

Usuario@LAPTOP-5O18608A MINGW64 ~/Documents/Cursos/JAVA2EE-Udemy/JSF/proyecto-jsf
$

	Usuario@LAPTOP-5O18608A MINGW64 ~/Documents/Cursos/JAVA2EE-Udemy/JSF/proyecto-jsf
	$ git init
	Initialized empty Git repository in C:/Users/Usuario/Documents/Cursos/JAVA2EE-Udemy/JSF/proyecto-jsf/.git/

Hacemos un git status para ver que archivos tenemos....


	$ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        .classpath
        .project
        .settings/
        APUNTES.TXT
        pom.xml
        src/
        target/

nothing added to commit but untracked files present (use "git add" to track)
	

Vamos a generar el archivo .gitignore con el block de notas y metemos los ficheros que no queremos que
se adjunten (.classpath,.proyect,.settings,target)

	$ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        .gitignore
        APUNTES.TXT
        pom.xml
        src/

nothing added to commit but untracked files present (use "git add" to track)

Ya los tenemos....

Una vez hecho lo enlacemos todo con git add .

	$ git add .

Usuario@LAPTOP-5O18608A MINGW64 ~/Documents/Cursos/JAVA2EE-Udemy/JSF/proyecto-jsf (master)
$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   .gitignore
        new file:   APUNTES.TXT
        new file:   pom.xml
        new file:   src/main/webapp/WEB-INF/web.xml
        new file:   src/main/webapp/index.jsp

vamos ha hacerle el git commit
	$ git commit -m "versión inicial del proyecto-jsf"
	[master (root-commit) ef3e545] versión inicial del proyecto-jsf
 	5 files changed, 37 insertions(+)
 	create mode 100644 .gitignore
 	create mode 100644 APUNTES.TXT
 	create mode 100644 pom.xml
 	create mode 100644 src/main/webapp/WEB-INF/web.xml
 	create mode 100644 src/main/webapp/index.jsp
	

nos vamos github y creamos el repositorio se va a llamar proyecto-jsf

copiamos ..
	…or push an existing repository from the command line

	git remote add origin https://github.com/Peypa0512/proyecto-jsf.git
	git branch -M main
	git push -u origin main

lo pegamos al git bash

	
	Enumerating objects: 11, done.
	Counting objects: 100% (11/11), done.
	Delta compression using up to 12 threads
	Compressing objects: 100% (6/6), done.
	Writing objects: 100% (11/11), 1.13 KiB | 1.13 MiB/s, done.
	Total 11 (delta 0), reused 0 (delta 0), pack-reused 0
	To https://github.com/Peypa0512/proyecto-jsf.git
	 * [new branch]      main -> main
	branch 'main' set up to track 'origin/main'.

Con esto ya hemos subido todo a github, lo comprobamos....

Para enlazarlo con eclipse nos vamos a la carpeta del proyecto-->boton dcho --> Team-->share project, 
como ya está seleccionado le damos a finish.

Con esto ya estaría enlazado con el repositorio remoto.


Configurando JSF en proyecto maven
----------------------------------

Vamos a apoyarnos del repositorio en internet...
	
	https://mvnrepository.com
	
En el buscador ponemos "JSF"

y vamos a coger
	Oracle's implementation of the JSF 2.2 Specification API.
	
	Vamos a coger la versión más reciente que es la 2.2.20
	
hacemos click en el recuadro y nos traemos el código

	<!-- https://mvnrepository.com/artifact/com.sun.faces/jsf-api -->
<dependency>
    <groupId>com.sun.faces</groupId>
    <artifactId>jsf-api</artifactId>
    <version>2.2.20</version>
</dependency>
	

Abrimos el archivo pom.xml


	<dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
    <!-- https://mvnrepository.com/artifact/com.sun.faces/jsf-api -->
	<dependency>
    	<groupId>com.sun.faces</groupId>
    	<artifactId>jsf-api</artifactId>
    	<version>2.2.20</version>
	</dependency>
    <!-- https://mvnrepository.com/artifact/com.sun.faces/jsf-impl -->
	<dependency>
    	<groupId>com.sun.faces</groupId>
    	<artifactId>jsf-impl</artifactId>
    	<version>2.2.20</version>
	</dependency>
  </dependencies>
  
  
Una vez hecho vamos con web.xml

Para ello volvemos a Google y buscamos web.xml 3.1


entramos en:
	https://mkyong.com/web-development/the-web-xml-deployment-descriptor-examples/
	
	<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee 
		 http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">
	</web-app>
	
entramos en web.xml
quedando así.....

	<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee 
		 http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

  <display-name>Archetype Created Web Application</display-name>
</web-app>
	
nos queda una cosa que cambiar, por lo que volvemos a google y ponemos en el buscador...

	jsf mykong example

y entramos en:

	https://mkyong.com/tutorials/jsf-2-0-tutorials/
	
	en quick start hay ejemplos entramos en el primero y en 
	
		4. JSF 2.0 Servlet Configuration
		
		copiamos....
		
	<!-- Change to "Production" when you are ready to deploy -->
	<context-param>
		<param-name>javax.faces.PROJECT_STAGE</param-name>
		<param-value>Development</param-value> ---> ambiente desarrollo porque estamos en forma local
	</context-param>

	<!-- Welcome page -->
	<welcome-file-list>
		<welcome-file>faces/login.xhtml</welcome-file>
	</welcome-file-list>

	<!-- JSF mapping -->
	<servlet>
		<servlet-name>Faces Servlet</servlet-name>
		<servlet-class>javax.faces.webapp.FacesServlet</servlet-class> --> servlet principal para hacer las peticiones http desde el navegador hacia el backend
		<load-on-startup>1</load-on-startup>
	</servlet>

	<!-- Map these files with JSF -->
	<servlet-mapping>
		<servlet-name>Faces Servlet</servlet-name>
		<url-pattern>*xhtml</url-pattern> --> todas las pantallas que van a tener que debe tener este formato
	</servlet-mapping>
	
	
volvemos a web.xml y debajo de esto pegamos todo....

	<display-name>Archetype Created Web Application</display-name>
		
		
		
Creación pantalla login.xhtml
-----------------------------

Vamos a generar un fichero en webapp --> new -->html file
		
le ponemos el nombre de login.xhtml --> next

Va a salir varios formatos pero dejaremos por defecto html5 y finish

volvemos a la página de antes 	
		
		jsf mykong example
		
		https://mkyong.com/tutorials/jsf-2-0-tutorials/
		
	3.JSF 2.0 Pages
	
	copiamos esta estructura....
	
		<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:f="http://java.sun.com/jsf/core"      
      xmlns:h="http://java.sun.com/jsf/html">
 
 
 volvemos a login.xhtml y quitamos todo y pegamos este código		
		
		
	<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:f="http://java.sun.com/jsf/core"      
      xmlns:h="http://java.sun.com/jsf/html">
	<h:head>
	
	
	</h:head>
	<h:body>
	
		<h:outputlabe value="Bienvenido a login"></h:outputlabe>
	</h:body>
</html>

	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		













